[{
    "type": "function",
    "function": {
        "name": "parse_with_criteria",
        "description": "날짜, 요일, 시간, 타임윈도우 등 기준으로 이벤트를 필터링합니다",
        "parameters": {
            "type": "object",
            "properties": {
                "criteria": {
                    "type": "object",
                    "description": "이벤트 필터링 기준",
                    "properties": {
                        "date": {
                            "type": "string",
                            "description": "특정 날짜의 이벤트만 포함 (YYYY-MM-DD 형식)",
                            "example": "2025-09-15"
                        },
                        "weekday": {
                            "type": "integer",
                            "description": "요일 기준 필터 (0=월요일, 1=화요일, ..., 6=일요일)",
                            "minimum": 0,
                            "maximum": 6,
                            "example": 4
                        },
                        "hour": {
                            "type": "string",
                            "description": "시작 시각 기준 필터 (HH 또는 HH:MM 형식)",
                            "example": "14:00"
                        },
                        "time_window_hours": {
                            "type": "number",
                            "description": "기준 시간으로부터 ±N시간 범위의 이벤트만 포함",
                            "example": 48
                        },
                        "reference_time": {
                            "type": "string",
                            "description": "time_window_hours나 nearest_n의 기준 시간 (ISO 8601 형식)",
                            "example": "2025-09-15T12:00:00+09:00"
                        },
                        "nearest_n": {
                            "type": "integer",
                            "description": "기준 시간에 가장 가까운 N개의 이벤트만 포함",
                            "minimum": 1,
                            "example": 5
                        },
                        "sort_by": {
                            "type": "string",
                            "description": "정렬 방식",
                            "enum": ["nearest", "start"],
                            "example": "nearest"
                        }
                    }
                }
            },
            "required": []
        }
    }
},
{
    "type": "function",
    "function": {
        "name": "parse_with_content",
        "description": "텍스트 내용으로 이벤트를 검색합니다. 제목, 설명, 장소, 멤버 필드를 통합하여 유사도 검색을 수행합니다",
        "parameters": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "description": "검색할 텍스트 쿼리",
                    "example": "회의"
                    
                },
                "criteria": {
                    "type": "object",
                    "description": "검색 전에 적용할 필터링 기준 (parse_with_criteria와 동일한 구조)",
                    "properties": {
                        "date": {"type": "string", "description": "특정 날짜 (YYYY-MM-DD)"},
                        "weekday": {"type": "integer", "description": "요일 (0-6)"},
                        "hour": {"type": "string", "description": "시작 시각 (HH:MM)"},
                        "time_window_hours": {"type": "number", "description": "시간 윈도우 (시간)"},
                        "reference_time": {"type": "string", "description": "기준 시간 (ISO 8601)"},
                        "nearest_n": {"type": "integer", "description": "가장 가까운 N개"},
                        "sort_by": {"type": "string", "enum": ["nearest", "start"], "description": "정렬 방식"}
                    },
                    "required": ["query"]
                },
                "k": {
                    "type": "integer",
                    "description": "반환할 최대 결과 수",
                    "default": 10,
                    "minimum": 1,
                    "maximum": 50
                }
            },
            "required": ["query"]
        }
    }
},
{
    "type": "function",
    "function": {
        "name": "delete_event_in_user",
        "description": "Delete an event by its ID.",
        "parameters": {
            "type": "object",
            "properties": {
                "event_id": {"type": "integer", "description": "ID of the event to delete"}
            },
            "required": ["event_id"]
        }
    }
},
{
    "type": "function",
    "function": {
        "name": "update_event_in_user",
        "description": "Update an event by ID with the provided partial fields.",
        "parameters": {
            "type": "object",
            "properties": {
                "event_id": {"type": "integer", "description": "ID of the event to update"},
                "updates": {
                    "type": "object",
                    "description": "Partial fields to update (patch)",
                    "properties": {
                        "date_start": {"type": "string", "description": "ISO 8601 datetime, e.g., 2025-10-01T09:00:00+09:00"},
                        "date_finish": {"type": "string", "description": "ISO 8601 datetime, e.g., 2025-10-01T11:00:00+09:00"},
                        "title": {"type": "string", "description": "Event title"},
                        "description": {"type": "string", "description": "Event description"},
                        "location": {"type": "string", "description": "Event location"},
                        "member": {"type": "array", "items": {"type": "string"}, "description": "Participants/members"}
                    }
                },
                "recompute_embedding": {"type": "boolean", "description": "Whether to recompute embedding after update", "default": true}
            },
            "required": ["event_id", "updates"]
        }
    }
},
{
    "type": "function",
    "function": {
        "name": "add_event_in_user",
        "description": "Create a new event with the smallest missing positive ID.",
        "parameters": {
            "type": "object",
            "properties": {
                "event_data": {
                    "type": "object",
                    "description": "Event payload to create (without id)",
                    "properties": {
                        "date_start": {"type": "string", "description": "ISO 8601 datetime, e.g., 2025-10-01T09:00:00+09:00", "example": "2025-10-01T09:00:00+09:00"},
                        "date_finish": {"type": "string", "description": "ISO 8601 datetime, e.g., 2025-10-01T11:00:00+09:00", "example": "2025-10-01T11:00:00+09:00"},
                        "title": {"type": "string", "description": "Event title", "example": "Project Meeting"},
                        "description": {"type": "string", "description": "Event description", "example": "Weekly sync"},
                        "location": {"type": "string", "description": "Event location", "example": "HQ Room A"},
                        "member": {"type": "array", "items": {"type": "string"}, "description": "Participants/members", "example": ["Jungwoo", "Team"]}
                    },
                    "required": ["date_start", "date_finish", "title"]
                },
                "recompute_embedding": {"type": "boolean", "description": "Whether to compute embedding on create", "default": true}
            },
            "required": ["event_data"]
        }
    }
},
{
    "type": "function",
    "function": {
        "name": "create_plan",
        "description": "복잡한 작업을 여러 단계로 나누어 계획을 세웁니다. 여러 함수를 조합하여 사용해야 할 때 사용합니다.",
        "parameters": {
            "type": "object",
            "properties": {
                "goal": {
                    "type": "string",
                    "description": "달성하고자 하는 목표",
                    "example": "내일 오후 회의 일정을 찾고, 비슷한 시간대에 다른 일정이 있는지 확인한 후 충돌을 해결"
                },
                "steps": {
                    "type": "array",
                    "description": "목표 달성을 위한 단계별 계획",
                    "items": {
                        "type": "object",
                        "properties": {
                            "step_number": {"type": "integer", "description": "단계 번호"},
                            "action": {"type": "string", "description": "수행할 작업"},
                            "function_name": {"type": "string", "description": "사용할 함수명"},
                            "parameters": {"type": "object", "description": "함수에 전달할 매개변수"},
                            "expected_result": {"type": "string", "description": "예상 결과"}
                        },
                        "required": ["step_number", "action", "function_name", "parameters", "expected_result"]
                    }
                }
            },
            "required": ["goal", "steps"]
        }
    }
},
{
    "type": "function",
    "function": {
        "name": "execute_plan",
        "description": "계획된 단계를 순차적으로 실행합니다.",
        "parameters": {
            "type": "object",
            "properties": {
                "plan_id": {
                    "type": "string",
                    "description": "실행할 계획의 ID"
                },
                "current_step": {
                    "type": "integer",
                    "description": "현재 실행할 단계 번호"
                }
            },
            "required": ["plan_id", "current_step"]
        }
    }
}
]